// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6.1 (swiftlang-5.6.0.323.66 clang-1316.0.20.12)
// swift-module-flags: -target arm64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name ChatSDK
import ChatProvidersSDK
@_exported import ChatSDK
import Foundation
import MessagingAPI
import SDKConfigurations
import Swift
import _Concurrency
extension ChatSDK.ChatEngine {
  @available(*, deprecated, message: "Use isConversationOngoing(_ completion: @escaping (Bool) -> Void) instead")
  @objc final public func isConversationOngoing() -> Swift.Bool
}
@_inheritsConvenienceInitializers @objc(ZDKChatConfiguration) final public class ChatConfiguration : ObjectiveC.NSObject, SDKConfigurations.Configuration {
  @objc final public var preChatFormConfiguration: ChatSDK.ChatFormConfiguration
  @objc final public var isChatTranscriptPromptEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc final public var isPreChatFormEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc final public var isOfflineFormEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc final public var isAgentAvailabilityEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc override final public var description: Swift.String {
    @objc get
  }
  @objc override final public var debugDescription: Swift.String {
    @objc get
  }
  final public var chatMenuActions: [ChatSDK.ChatMenuAction]
  @objc override dynamic public init()
  @objc deinit
}
extension ChatSDK.ChatConfiguration {
  @objc override final public func isEqual(_ object: Any?) -> Swift.Bool
}
extension ChatSDK.ChatConfiguration {
  @available(swift, obsoleted: 1.0)
  @objc final public func setChatMenuActions(_ actions: [Swift.Int])
  @available(swift, obsoleted: 1.0)
  @objc final public var menuActions: [Swift.Int] {
    @objc get
  }
}
@objc(ZDKChatFormConfiguration) final public class ChatFormConfiguration : ObjectiveC.NSObject {
  @objc final public var name: ChatSDK.FormFieldStatus
  @objc final public var email: ChatSDK.FormFieldStatus
  @objc final public var phoneNumber: ChatSDK.FormFieldStatus
  @objc final public var department: ChatSDK.FormFieldStatus
  @objc override final public var description: Swift.String {
    @objc get
  }
  @objc override final public var debugDescription: Swift.String {
    @objc get
  }
  @objc public init(name: ChatSDK.FormFieldStatus = .optional, email: ChatSDK.FormFieldStatus = .optional, phoneNumber: ChatSDK.FormFieldStatus = .optional, department: ChatSDK.FormFieldStatus = .optional)
  @objc override final public func isEqual(_ object: Any?) -> Swift.Bool
  @objc deinit
}
@objc(ZDKFormFieldStatus) public enum FormFieldStatus : Swift.Int, Swift.Equatable, Swift.CustomStringConvertible {
  case required
  case optional
  case hidden
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @objc(ZDKChatEngine) final public class ChatEngine : ObjectiveC.NSObject, MessagingAPI.Engine, ChatProvidersSDK.Loggable {
  @objc final public let id: Swift.String
  final public let transferOptionDescription: MessagingAPI.TransferOptionDescription
  final public var onUpdate: ([MessagingAPI.ObservableIdentifier : (MessagingAPI.Update) -> Swift.Void])
  @objc final public var configuration: ChatSDK.ChatConfiguration {
    @objc get
  }
  @objc deinit
  @objc final public func isConversationOngoing(_ completion: @escaping (Swift.Bool) -> Swift.Void)
  @objc public static func engine() throws -> ChatSDK.ChatEngine
  final public func onEvent(_ event: MessagingAPI.Event)
}
extension ChatSDK.ChatEngine {
  final public func start(messagingAPI: MessagingAPI.MessagingAPIProtocol)
  final public func stop()
}
extension ChatSDK.ChatEngine : MessagingAPI.Observable {
  final public func observeUpdates(_ completion: @escaping (MessagingAPI.Update) -> Swift.Void) -> MessagingAPI.ObservationToken
  public typealias Observable = MessagingAPI.Update
}
@objc(ZDKChatMenuAction) public enum ChatMenuAction : Swift.Int {
  case endChat
  case emailTranscript
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension ChatSDK.FormFieldStatus : Swift.Hashable {}
extension ChatSDK.FormFieldStatus : Swift.RawRepresentable {}
extension ChatSDK.ChatMenuAction : Swift.Equatable {}
extension ChatSDK.ChatMenuAction : Swift.Hashable {}
extension ChatSDK.ChatMenuAction : Swift.RawRepresentable {}
